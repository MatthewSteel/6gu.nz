## Display:
  - Validate cells: If a lookup fails, italicise the key?

- Long formula columns extend the table (bug),
- Fancy relational stuff? One-to-many relationships, editing etc?

Little bits and pieces:
 - Fade-in on the formula as it pops up,
 - Make it "pop up" instead of growing?


Things we probably won't get to soon:
 - Tokenify-as-you-type,
 - Tab-completion,
 - Automatic quote/bracket insertion,
 - Bracket-highlighting.

Update the site...

Later (probably after "relational stuff"):
 - Write a blog post and update the site.


What's after this?
 - Browse into objects/arrays,
 - Pop-over tab,
 - Charts...
 - browsing/scrolling while writing formulas.


Or:
 - Cut/paste. Just top-level first, with preview icon maybe, with <esc> cancel
 - Pop-over book stuff. Ctrl-click, I think. Prettty important.
 - Charts v0.


Cut, copy and paste:
- First up: cut and paste sheet-level things.
  - New redux state: copy-state: { type: 'CUT', location: { ref: $FOO } }
  - Move the thing (possibly resizing it?)
  - Blank out the copy-state,
  - Fix up refs and save.
- Make the selection thing grey if it's not a good place to paste.
- Make a copy-selection preview?
  - The cell in the bottom-right, with a shadow. 1x1.
- Shortcuts to cut, paste, clear copy-state (esc, make it take priority over closing the pop-over menu maybe.)

- Copy:
  - Same as before, except:
    - Instead of moving, we copy the thing (and its children),
    - Pasting doesn't clear the selection.

- More things:
  - Array cells, object cells, table cells, table cols, table rows.

Then:
 - Pasting into other places :-(((((
What will this entail?
 - Pasting complex values into table cells etc. (Paste as values?)
 - Pasting things into table rows...
   - If it's a struct, merge the thing and make new cols as needed.
   - If it's not, you can't paste it.
 - Pasting things into table cols:
   - If it's an array, merge the thing and make new rows as needed.
   - Maybe sometimes make it a formula-col? When/not?
     - Maybe do for everything except formulas that are just arrays?

Then:
 - Pasting over the top of things :o


Quite a bit of work, it seems. Oh well, need to start somewhere.

 - "When can we not paste?"
   - Mostly just "A row but not an object"?
   - Or, actually, "A row but not an object literal" I think.
     Slightly annoying...
 Should we figure out "computed rows"?

  Anyway, that's kinda nice regardless.
  And... maybe we can't paste things without formulas into table cells etc at first? That might save us from circular references...

  - Maybe copy-paste always pastes values? Hmm, that's pretty interesting...
    And cut moves? Hmm...

So maybe you can copy/paste in more places than you can cut?
  That's pretty crap, tbh.



OK, what if we have computed rows, and they "come before" computed columns?
  I think that's doable?


Little jobs:
 - [index] on objects,
 - max, deep equals?
 - See what it looks like in different browsers, different screen res.
 - Fast-movement shortcuts (ctrl+move)

 - Let all arguments to `if` and && (etc?) be objects.
 - Change `byName` into a Map.



The longer-term list:
 - V2 "each" or "depth" or "height", maybe [i, j] indexing?
 - V2 browse into more things -- arrays etc, complex table elements.
 - V2 "native" map/for etc?
   - Concatenate/map/zip tables/arrays
 - V2 Cut/copy/paste
 - V2 Overridden deep values look special? Hrm... "parent overridden" prop?
 - V2 Multi-select,
 - V3 Date, time, random functions.
 - V3 "actions" (xhr etc),
     - mutation story (redux?),
     - conditional evaluation, HOF or first-class cell references,
 - V3 js interop, in (npm) and out (export to js)
 - Tab completion etc,
 - V4 collaboration,
 - ?? custom cell formatting incl charts-in-cells (user react components).
     - input modes for rich text?
 - ?? closures and first-class functions.
 - ?? laziness
 - ?? Type tagging, efficient operations on homogeneous arrays
 - Totally offline: docs, scripts, _everything_ in storage/indexeddb.
 - Maybe relative table/array references in formulas (?). `$row - 1`?
 - Animations, "Fly-in-from-side"
 - Value writes -- `cellObject(k1.k2.k3: v)`?
   - k1 lookup order "local sheet-element names, sheet names, cellObj prop"
   - cellArray(0: v) ? OK.


Next up:
 - Browse into array values,
   - Path at the top,
   - Storing the path in the view somehow.
     - Path is a lookupExpression from the selected sheet, I think.
       Except we have to invert it, and add more crap for unreified shit.
       Fine: `[{ name: 'fred' }, { index: 0 }]` haha
         Except we have to get the array name in there too...
           Each path element is a list?
             [[{ id: sldkfj }], [{ id: vnkfljg }, { index: 10 }], ...]?
       Can/should we get rid of byId? Meh, if it's there...
         `{ id: 'sldkfjsjf' }` too, then.
   - Should this be in redux? Probably...
     - It's a bit of a pain that "path validity" depends on cell values.
     - We can make the "effective view" a selector, I guess?
       - Righto. But later.



What do we think about multiple indexes to dig?
  arr[range(n), 0] could get the first column of a matrix.
Dunno... Doesn't seem powerful enough? I don't think it can transpose...


Possible projects after/during MVP work:
 - Drag select to make arrays/objects/tables? In a formula?
   - shift/ctrl + click could also make an array, or add to one :-)
   - Maybe "drag to select, makes an array. Hit 'tab' to turn it into an object/table". Seems reasonable?
   - "Make it an array" in the formula, or in the sheet, though?
 - Row/column headers (or scroll indicators of some other kind.)
    - Simple fake scroll bars, maybe?
    - Just shadows?
 - keyboard scrolling -- [shift or ctrl]+down scrolls current viewport?
 - Better sheet select, scratch-space,
 - Rethought book layout, maybe pop-over preview.


Different views of data. Hmm. If it's small you can "browse to it", if it's big you can see it?
  - "Expanded view" for arrays and "template-less" objects.
  - Just the array/object in the top-left corner, with biggish dimensions?
    Great!


An additional way to write lists/objects/tables:
  a[0] = 1
  a.b = 2
  a.b[1] = 3
  a[1].b = 3

One more: "Turn the previous cell into an array, and append to it:
  ,= 1
  .name = "Fred"

Helpful if we can edit whole-list/obj/table formulas too, so converting an array into a table is as easy as editing the formula.
  Hopefully we can truncate the unparsed value before it gets too long :-)
  ("If it has `...` in it, get rid of it :-)
    Or some "truncated" policy.


---------------
[obj][ a ][ b ]
[ 0 ][val][val]
---------------
[ 1 ][...][...]
[ 2 ][...][...]
---------------


I think we can let the user come up with primary keys. Names could be helpful, though...
  - Maybe maps/filters etc can have names in them?
  - References can be mapped onto the table, not global.
  - `While` tables can just have numbers, or not be named?

Also: we may want to support polymorphic arr["property"] and arr[i].

Can we select cols like `friends[[age, name]]` to get partial structs (or partial transpose-structs)?
  Maybe `friends[{age, name}]`? What is `{age, name}` though...
    They are "children by name, in the relative namespace of `friends`".
    That's nice.

    Should we merge lookup and lookupIndex? (Well, we have to display them differently...)
      We could call `.name` and `.index` something like `.key` instead?


Start shitty and upgrade it - for us and the user.
That means:
  - Let them import CSVs and "get to work" on them. Lookups, aggregates.
  - Let them "tidy" the data model up. Define cross-relationships for simpler formulas.
    - No, actually, I don't like this. How do you script some GTFS processing like this? Too much manual work. We don't want to be a fancy Excel, remember? AirTable have this problem too...
    - Maybe it's actually just a property of the table, then?
      Or maybe the user can script a transform from CSV -> "nice" table?
      Sure, that's doable.


Now, things about "dragging a cell down" etc... Auto-fills and so on. Are they just "fancy value input", or do they create formulas?


OK, I like the idea of making relational tables out of flat input.
  Should it just be a property of the table? "Do one-many on this col?"
  Dunno.
  Can we punt on this? How necessary is it to get this right right now?

Hmm, maybe we should have two kinds of tables -- value tables and "view" tables. Then computed columns are kinda "easy". Not too usable, though...

Do we face problems with recursion? Two-way data?
  Say we want to have a `.friends` relation.
    `a.friends.age` gives a list of ages.
    `a.friends.friends` is a circular reference problem, maybe?
      Actually, probably not. We can probably `flatten(a.friends.friends)`.
      _We_ need to come after friends, and _we_ need to come after friends?
      Yes. We can do a transitive closure! Hooray!

You can augment tables, to whatever you want with them, operate on them like values, _but_, we give good, useful ways to do "better" data transformations, and let the user build tools for their own use.

That's a good mission statement -- let the user do what they want to do, but give them headroom. Don't presume that we know best. We need to not only provide the best way of doing something but the _easiest_ as well.

Selection: In formulas it can make a list (of names), in the sheet it can make an object or array. Or do some formatting, or delete things.

I wonder -- what do users use "paste values" for?

Ugh, I suspect "data tables" will be dense with formulas, unless we can impose some structure.
  - "Value columns and formula columns" maybe?
  - "adjacent tables/arays of the same height scroll together"?

Maybe adding and removing columns copies the table?

Maybe we have "series" tables and "data" tables.

Hmm, tables are used for a bunch of different purposes :-/

It _would_ be nice if we could encourage users to "do reasonable things".
It would also be nice if we could support whatever workflows they are used to.

Series data often has rolling sums, time-averages etc.

Maybe there's "core" data and "augmenting" data? |||==ish.
  Niice.

Maybe that can be done automatically, though.
A table could have a "core" data-like content with surrounding computed cols/rows.

A few things:
 - We want it to work _as_ a database,
 - We want it to work _on_ a database,
 - We want it to work as a spreadsheet.

People are going to start with the spreadsheet.
Hmm, let's just optimise for the spreadsheet case first, yeah?

A couple of ways of looking at it:
  - AirTable is super structured. Quite restrictive. What do they get out of it?
    - Foreign key constraints,
    - Simple "order of execution",
    - More scriptability because the formulas generalise.
  - Excel is very loose. What do they get out of it?
    - More use-cases covered,
    - More user-exploration and rapid-prototyping possible.

Things they are used for:
 - Records,
 - Series data with calculations,
   - Pure series calculations after t=0,
 - Matrices
 - Drawing pictures :-/

Time-series tends to go left-to-right? Hmm. Well, whatever, new habits.
  - Bad attitude.

We could make it easy to copy, and maybe fix up references if the users wants to "copy, transform and hide the old one"?
  - Like a what-if...
    `=restOfTheData(table1=table1(col1 = table1.col1 + 1))`

I like the idea of taking a table and adding rows to the bottom and columns to the right. Has to be user-friendly, though.
  Colour-coding based on insertion order? Re-ordering possible?
  To the user it can look like "horizontal borders between rows when the formulas change." I think that's a useful heuristic.

Maybe there are three kinds of rows:
 - Add a row,
 - Maybe add a row,
 - Repeatedly add rows.
